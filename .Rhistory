color =  ds_split), method = "lm", alpha = 0.2) +
xlab("log10(Observed rates+1)") +
ylab("log10(Predicted rates+1)") +
scale_shape_manual(values = c(21, 16)) + #shape or color by iteration
scale_color_manual(values = c( "lightblue", "maroon")) +
#update if data changes - not automatically added
annotate(geom="text", x=3.5, y=0.5, label="R^2 == 0.05",parse =TRUE, color="maroon", size =4.5) + #update if data changes - not automatically added
annotate(geom="text", x=3.5, y=0.25, label="R^2 == 0.12", parse =TRUE,
color="lightblue", size =4.5) + #update - not automatically added
lims(y = c(0,4), x = c(0,4)) +
theme_classic() +
theme(text = element_text(size = 16),
legend.position = 0)
#adding density plots on axes
ggExtra::ggMarginal(fullscatter_firstiteration, fill = "lightgrey")
fullscatter_firstiteration <-
firstiterationds %>%
ggplot(aes(abs(Log_Observed_Normalized_Respiration_Rate ),
abs(Log_Predicted_Normalized_Respiration_Rate_Sep2019) #)) +
,  color =  ds_split))+
#to see R^2 for above/below thresholds, remove color grouping above and use stat poly eq fx (below)
geom_point(color = "darkgrey", size = 3, pch = 21) +
geom_vline (xintercept = 2.7, linetype = "dashed", color="grey") +
geom_hline (yintercept = 2.7, linetype = "dashed", color="dark grey") + #not a clear threshold
geom_abline (linetype = "longdash", color="black") + #not a clear threshold
stat_poly_line(color = "black", alpha = 0.5) + #overall best fit
stat_poly_eq(use_label(c( "R2"))) + #remove hashtag to see R^2 of log500 split
annotate(geom="text", x=3.47, y=0.75, label="R^2 == 0.44",parse =TRUE, color="black", size =4.5) + #update if data changes - not automatically added
geom_smooth( aes(abs(Log_Observed_Normalized_Respiration_Rate ), #above/below threshold best fit
abs(Log_Predicted_Normalized_Respiration_Rate_Sep2019),
color =  ds_split), method = "lm", alpha = 0.2) +
xlab("log10(Observed rates+1)") +
ylab("log10(Predicted rates+1)") +
scale_shape_manual(values = c(21, 16)) + #shape or color by iteration
scale_color_manual(values = c( "lightblue", "maroon")) +
#update if data changes - not automatically added
annotate(geom="text", x=3.5, y=0.5, label="R^2 == 0.05",parse =TRUE, color="maroon", size =4.5) + #update if data changes - not automatically added
annotate(geom="text", x=3.5, y=0.25, label="R^2 == 0.12", parse =TRUE,
color="lightblue", size =4.5) + #update - not automatically added
lims(y = c(0,4), x = c(0,4)) +
theme_classic() +
theme(text = element_text(size = 16),
legend.position = 0)
#adding density plots on axes
ggExtra::ggMarginal(fullscatter_firstiteration, fill = "lightgrey")
fullscatter_firstiteration <-
firstiterationds %>%
ggplot(aes(abs(Log_Observed_Normalized_Respiration_Rate ),
abs(Log_Predicted_Normalized_Respiration_Rate_Sep2019) #)) +
,  color =  ds_split))+
#to see R^2 for above/below thresholds, remove color grouping above and use stat poly eq fx (below)
geom_point(color = "darkgrey", size = 3, pch = 21) +
geom_vline (xintercept = 2.7, linetype = "dashed", color="grey") +
geom_hline (yintercept = 2.7, linetype = "dashed", color="dark grey") + #not a clear threshold
geom_abline (linetype = "longdash", color="black") + #not a clear threshold
stat_poly_line(color = "black", alpha = 0.5) + #overall best fit
stat_poly_eq(use_label(c( "R2"))) + #remove hashtag to see R^2 of log500 split
annotate(geom="text", x=3.5, y=0.75, label="R^2 == 0.44",parse =TRUE, color="black", size =4.5) + #update if data changes - not automatically added
geom_smooth( aes(abs(Log_Observed_Normalized_Respiration_Rate ), #above/below threshold best fit
abs(Log_Predicted_Normalized_Respiration_Rate_Sep2019),
color =  ds_split), method = "lm", alpha = 0.2) +
xlab("log10(Observed rates+1)") +
ylab("log10(Predicted rates+1)") +
scale_shape_manual(values = c(21, 16)) + #shape or color by iteration
scale_color_manual(values = c( "lightblue", "maroon")) +
#update if data changes - not automatically added
annotate(geom="text", x=3.5, y=0.5, label="R^2 == 0.05",parse =TRUE, color="maroon", size =4.5) + #update if data changes - not automatically added
annotate(geom="text", x=3.5, y=0.25, label="R^2 == 0.12", parse =TRUE,
color="lightblue", size =4.5) + #update - not automatically added
lims(y = c(0,4), x = c(0,4)) +
theme_classic() +
theme(text = element_text(size = 16),
legend.position = 0)
#adding density plots on axes
ggExtra::ggMarginal(fullscatter_firstiteration, fill = "lightgrey")
fullscatter_firstiteration <-
firstiterationds %>%
ggplot(aes(abs(Log_Observed_Normalized_Respiration_Rate ),
abs(Log_Predicted_Normalized_Respiration_Rate_Sep2019) #)) +
,  color =  ds_split))+
#to see R^2 for above/below thresholds, remove color grouping above and use stat poly eq fx (below)
geom_point(color = "darkgrey", size = 3, pch = 21) +
geom_vline (xintercept = 2.7, linetype = "dashed", color="grey") +
geom_hline (yintercept = 2.7, linetype = "dashed", color="dark grey") + #not a clear threshold
geom_abline (linetype = "longdash", color="black") + #not a clear threshold
stat_poly_line(color = "black", alpha = 0.5) + #overall best fit
# stat_poly_eq(use_label(c( "R2"))) + #remove hashtag to see R^2 of log500 split
annotate(geom="text", x=3.5, y=0.75, label="R^2 == 0.44",parse =TRUE, color="black", size =4.5) + #update if data changes - not automatically added
geom_smooth( aes(abs(Log_Observed_Normalized_Respiration_Rate ), #above/below threshold best fit
abs(Log_Predicted_Normalized_Respiration_Rate_Sep2019),
color =  ds_split), method = "lm", alpha = 0.2) +
xlab("log10(Observed rates+1)") +
ylab("log10(Predicted rates+1)") +
scale_shape_manual(values = c(21, 16)) + #shape or color by iteration
scale_color_manual(values = c( "lightblue", "maroon")) +
#update if data changes - not automatically added
annotate(geom="text", x=3.5, y=0.5, label="R^2 == 0.05",parse =TRUE, color="maroon", size =4.5) + #update if data changes - not automatically added
annotate(geom="text", x=3.5, y=0.25, label="R^2 == 0.12", parse =TRUE,
color="lightblue", size =4.5) + #update - not automatically added
lims(y = c(0,4), x = c(0,4)) +
theme_classic() +
theme(text = element_text(size = 16),
legend.position = 0)
#adding density plots on axes
ggExtra::ggMarginal(fullscatter_firstiteration, fill = "lightgrey")
ggsave(filename = "Scripts/fullscatter_firstiteration.tiff", plot = fullscatter_firstiteration, width = 6, height = 6, dpi = 300)
#fullscatter_lastiteration <-
combods %>% ggplot(aes(abs(Log_Observed_Normalized_Respiration_Rate ),
abs(Log_Predicted_Normalized_Respiration_Rate_Nov2023) )) + #
#,  color =  ds_split))+
#to see R^2 for above/below thresholds, remove color grouping above and use stat poly eq fx (below)
geom_point(color = "darkgrey", size = 3, pch = 21) +
geom_vline (xintercept = 2.7, linetype = "dashed", color="grey") +
geom_hline (yintercept = 2.7, linetype = "dashed", color="dark grey") + #not a clear threshold
geom_abline (linetype = "longdash", color="black") + #not a clear threshold
stat_poly_line(color = "black", alpha = 0.5) + #overall best fit
# stat_poly_eq(use_label(c( "R2"))) + #remove hashtag to see R^2 of log500 split
annotate(geom="text", x=3.5, y=0.75, label="R^2 == 0.61",parse =TRUE, color="black", size =4.5) + #update if data changes - not automatically added
geom_smooth( aes(abs(Log_Observed_Normalized_Respiration_Rate ), #above/below threshold best fit
abs(Log_Predicted_Normalized_Respiration_Rate_Nov2023),
color =  ds_split), method = "lm", alpha = 0.2) +
xlab("log10(Observed rates+1)") +
ylab("log10(Predicted rates+1)") +
scale_shape_manual(values = c(21, 16)) + #shape or color by iteration
scale_color_manual(values = c( "lightblue", "maroon")) +
#update if data changes - not automatically added
annotate(geom="text", x=3.45, y=0.5, label="R^2 == 0.20",parse =TRUE, color="maroon", size =4.5) + #update if data changes - not automatically added
annotate(geom="text", x=3.5, y=0.25, label="R^2 == 0.21", parse =TRUE,
color="lightblue", size =4.5) + #update - not automatically added
lims(y = c(0,4), x = c(0,4)) +
theme_classic() +
theme(text = element_text(size = 16),
legend.position = 0)
#fullscatter_lastiteration <-
combods %>% ggplot(aes(abs(Log_Observed_Normalized_Respiration_Rate ),
abs(Log_Predicted_Normalized_Respiration_Rate_Nov2023) )) + #
#,  color =  ds_split))+
#to see R^2 for above/below thresholds, remove color grouping above and use stat poly eq fx (below)
geom_point(color = "darkgrey", size = 3, pch = 21) +
geom_vline (xintercept = 2.7, linetype = "dashed", color="grey") +
geom_hline (yintercept = 2.7, linetype = "dashed", color="dark grey") + #not a clear threshold
geom_abline (linetype = "longdash", color="black") + #not a clear threshold
stat_poly_line(color = "black", alpha = 0.5) + #overall best fit
stat_poly_eq(use_label(c( "R2"))) + #remove hashtag to see R^2 of log500 split
annotate(geom="text", x=3.5, y=0.75, label="R^2 == 0.61",parse =TRUE, color="black", size =4.5) + #update if data changes - not automatically added
geom_smooth( aes(abs(Log_Observed_Normalized_Respiration_Rate ), #above/below threshold best fit
abs(Log_Predicted_Normalized_Respiration_Rate_Nov2023),
color =  ds_split), method = "lm", alpha = 0.2) +
xlab("log10(Observed rates+1)") +
ylab("log10(Predicted rates+1)") +
scale_shape_manual(values = c(21, 16)) + #shape or color by iteration
scale_color_manual(values = c( "lightblue", "maroon")) +
#update if data changes - not automatically added
annotate(geom="text", x=3.45, y=0.5, label="R^2 == 0.20",parse =TRUE, color="maroon", size =4.5) + #update if data changes - not automatically added
annotate(geom="text", x=3.5, y=0.25, label="R^2 == 0.21", parse =TRUE,
color="lightblue", size =4.5) + #update - not automatically added
lims(y = c(0,4), x = c(0,4)) +
theme_classic() +
theme(text = element_text(size = 16),
legend.position = 0)
#fullscatter_lastiteration <-
combods %>% ggplot(aes(abs(Log_Observed_Normalized_Respiration_Rate ),
abs(Log_Predicted_Normalized_Respiration_Rate_Nov2023) #)) + #
,  color =  ds_split))+
#to see R^2 for above/below thresholds, remove color grouping above and use stat poly eq fx (below)
geom_point(color = "darkgrey", size = 3, pch = 21) +
geom_vline (xintercept = 2.7, linetype = "dashed", color="grey") +
geom_hline (yintercept = 2.7, linetype = "dashed", color="dark grey") + #not a clear threshold
geom_abline (linetype = "longdash", color="black") + #not a clear threshold
stat_poly_line(color = "black", alpha = 0.5) + #overall best fit
stat_poly_eq(use_label(c( "R2"))) + #remove hashtag to see R^2 of log500 split
annotate(geom="text", x=3.5, y=0.75, label="R^2 == 0.56",parse =TRUE, color="black", size =4.5) + #update if data changes - not automatically added
geom_smooth( aes(abs(Log_Observed_Normalized_Respiration_Rate ), #above/below threshold best fit
abs(Log_Predicted_Normalized_Respiration_Rate_Nov2023),
color =  ds_split), method = "lm", alpha = 0.2) +
xlab("log10(Observed rates+1)") +
ylab("log10(Predicted rates+1)") +
scale_shape_manual(values = c(21, 16)) + #shape or color by iteration
scale_color_manual(values = c( "lightblue", "maroon")) +
#update if data changes - not automatically added
annotate(geom="text", x=3.45, y=0.5, label="R^2 == 0.20",parse =TRUE, color="maroon", size =4.5) + #update if data changes - not automatically added
annotate(geom="text", x=3.5, y=0.25, label="R^2 == 0.21", parse =TRUE,
color="lightblue", size =4.5) + #update - not automatically added
lims(y = c(0,4), x = c(0,4)) +
theme_classic() +
theme(text = element_text(size = 16),
legend.position = 0)
#adding density plots on axes
ggExtra::ggMarginal(fullscatter_lastiteration, fill = "lightgrey")
#fullscatter_lastiteration <-
combods %>% ggplot(aes(abs(Log_Observed_Normalized_Respiration_Rate ),
abs(Log_Predicted_Normalized_Respiration_Rate_Nov2023) #)) + #
,  color =  ds_split))+
#to see R^2 for above/below thresholds, remove color grouping above and use stat poly eq fx (below)
geom_point(color = "darkgrey", size = 3, pch = 21) +
geom_vline (xintercept = 2.7, linetype = "dashed", color="grey") +
geom_hline (yintercept = 2.7, linetype = "dashed", color="dark grey") + #not a clear threshold
geom_abline (linetype = "longdash", color="black") + #not a clear threshold
stat_poly_line(color = "black", alpha = 0.5) + #overall best fit
stat_poly_eq(use_label(c( "R2"))) + #remove hashtag to see R^2 of log500 split
annotate(geom="text", x=3.5, y=0.75, label="R^2 == 0.56",parse =TRUE, color="black", size =4.5) + #update if data changes - not automatically added
geom_smooth( aes(abs(Log_Observed_Normalized_Respiration_Rate ), #above/below threshold best fit
abs(Log_Predicted_Normalized_Respiration_Rate_Nov2023),
color =  ds_split), method = "lm", alpha = 0.2) +
xlab("log10(Observed rates+1)") +
ylab("log10(Predicted rates+1)") +
scale_shape_manual(values = c(21, 16)) + #shape or color by iteration
scale_color_manual(values = c( "lightblue", "maroon")) +
#update if data changes - not automatically added
annotate(geom="text", x=3.45, y=0.5, label="R^2 == 0.20",parse =TRUE, color="maroon", size =4.5) + #update if data changes - not automatically added
annotate(geom="text", x=3.5, y=0.25, label="R^2 == 0.21", parse =TRUE,
color="lightblue", size =4.5) + #update - not automatically added
lims(y = c(0,4), x = c(0,4)) +
theme_classic() +
theme(text = element_text(size = 16),
legend.position = 0)
combods <- read.csv("ICON-ModEx_Combined_Predicted_Observed_Respiration_Rates.csv")%>%
#remova Na's
filter(!is.na(Log_Observed_Normalized_Respiration_Rate), #Log_Observed_Normalized_Respiration_Rate
!is.na(Log_Predicted_Normalized_Respiration_Rate_Sep2019), !is.na(Log_Predicted_Normalized_Respiration_Rate_Nov2023)) %>% filter(Log_Observed_Normalized_Respiration_Rate > -9990,                                            Log_Predicted_Normalized_Respiration_Rate_Nov2023 > -9990 ,
Log_Predicted_Normalized_Respiration_Rate_Sep2019 > -9990) %>% #Log_Predicted_Normalized_Respiration_Rate
#group by above/below log500
mutate(ds_split = ifelse(Log_Observed_Normalized_Respiration_Rate > 2.7, "500+",                         ifelse(Log_Observed_Normalized_Respiration_Rate < 2.7, "500-", "500-") )) %>%
#clasifying by quad by year
mutate(ds_quadrant23 =                                                    ifelse(Log_Observed_Normalized_Respiration_Rate > 2.7 & Log_Predicted_Normalized_Respiration_Rate_Nov2023 > 2.7 , "hs23",
ifelse(Log_Observed_Normalized_Respiration_Rate > 2.7 & Log_Predicted_Normalized_Respiration_Rate_Nov2023 < 2.7 , "misclass_hs23",
ifelse(Log_Observed_Normalized_Respiration_Rate < 2.7 & Log_Predicted_Normalized_Respiration_Rate_Nov2023 < 2.7 , "cs23",
ifelse(Log_Observed_Normalized_Respiration_Rate < 2.7 & Log_Predicted_Normalized_Respiration_Rate_Nov2023 > 2.7 , "misclass_cs23", NA)))) ,
ds_quadrant19 =
ifelse(Log_Observed_Normalized_Respiration_Rate > 2.7 & Log_Predicted_Normalized_Respiration_Rate_Sep2019 > 2.7 , "hs19",
ifelse(Log_Observed_Normalized_Respiration_Rate > 2.7 & Log_Predicted_Normalized_Respiration_Rate_Sep2019 < 2.7 , "misclass_hs19",
ifelse(Log_Observed_Normalized_Respiration_Rate < 2.7 & Log_Predicted_Normalized_Respiration_Rate_Sep2019 > 2.7 , "misclass_cs19",
ifelse(Log_Observed_Normalized_Respiration_Rate < 2.7 & Log_Predicted_Normalized_Respiration_Rate_Sep2019 < 2.7 , "cs19", NA ) ))))
combods <- read.csv("ICON-ModEx_Combined_Predicted_Observed_Respiration_Rates.csv")
combods_filt <- read.csv("ICON-ModEx_Combined_Predicted_Observed_Respiration_Rates.csv")
combods_filt <- read.csv("ICON-ModEx_Combined_Predicted_Observed_Respiration_Rates.csv")%>%
#remova Na's
filter(!is.na(Log_Observed_Normalized_Respiration_Rate), #Log_Observed_Normalized_Respiration_Rate
!is.na(Log_Predicted_Normalized_Respiration_Rate_Sep2019), !is.na(Log_Predicted_Normalized_Respiration_Rate_Nov2023)) %>% filter(Log_Observed_Normalized_Respiration_Rate > -9990,                                            Log_Predicted_Normalized_Respiration_Rate_Nov2023 > -9990 ,
Log_Predicted_Normalized_Respiration_Rate_Sep2019 > -9990) %>% #Log_Predicted_Normalized_Respiration_Rate
#group by above/below log500
mutate(ds_split = ifelse(Log_Observed_Normalized_Respiration_Rate > 2.7, "500+",                         ifelse(Log_Observed_Normalized_Respiration_Rate < 2.7, "500-", "500-") )) %>%
#clasifying by quad by year
mutate(ds_quadrant23 =                                                    ifelse(Log_Observed_Normalized_Respiration_Rate > 2.7 & Log_Predicted_Normalized_Respiration_Rate_Nov2023 > 2.7 , "hs23",
ifelse(Log_Observed_Normalized_Respiration_Rate > 2.7 & Log_Predicted_Normalized_Respiration_Rate_Nov2023 < 2.7 , "misclass_hs23",
ifelse(Log_Observed_Normalized_Respiration_Rate < 2.7 & Log_Predicted_Normalized_Respiration_Rate_Nov2023 < 2.7 , "cs23",
ifelse(Log_Observed_Normalized_Respiration_Rate < 2.7 & Log_Predicted_Normalized_Respiration_Rate_Nov2023 > 2.7 , "misclass_cs23", NA)))) ,
ds_quadrant19 =
ifelse(Log_Observed_Normalized_Respiration_Rate > 2.7 & Log_Predicted_Normalized_Respiration_Rate_Sep2019 > 2.7 , "hs19",
ifelse(Log_Observed_Normalized_Respiration_Rate > 2.7 & Log_Predicted_Normalized_Respiration_Rate_Sep2019 < 2.7 , "misclass_hs19",
ifelse(Log_Observed_Normalized_Respiration_Rate < 2.7 & Log_Predicted_Normalized_Respiration_Rate_Sep2019 > 2.7 , "misclass_cs19",
ifelse(Log_Observed_Normalized_Respiration_Rate < 2.7 & Log_Predicted_Normalized_Respiration_Rate_Sep2019 < 2.7 , "cs19", NA ) ))))
firstiterationds <- combods %>% filter(grepl("S19S", Sample_Name))
fullscatter_firstiteration <-
firstiterationds %>%
ggplot(aes(abs(Log_Observed_Normalized_Respiration_Rate ),
abs(Log_Predicted_Normalized_Respiration_Rate_Sep2019) #)) +
,  color =  ds_split))+
#to see R^2 for above/below thresholds, remove color grouping above and use stat poly eq fx (below)
geom_point(color = "darkgrey", size = 3, pch = 21) +
geom_vline (xintercept = 2.7, linetype = "dashed", color="grey") +
geom_hline (yintercept = 2.7, linetype = "dashed", color="dark grey") + #not a clear threshold
geom_abline (linetype = "longdash", color="black") + #not a clear threshold
stat_poly_line(color = "black", alpha = 0.5) + #overall best fit
# stat_poly_eq(use_label(c( "R2"))) + #remove hashtag to see R^2 of log500 split
annotate(geom="text", x=3.5, y=0.75, label="R^2 == 0.44",parse =TRUE, color="black", size =4.5) + #update if data changes - not automatically added
geom_smooth( aes(abs(Log_Observed_Normalized_Respiration_Rate ), #above/below threshold best fit
abs(Log_Predicted_Normalized_Respiration_Rate_Sep2019),
color =  ds_split), method = "lm", alpha = 0.2) +
xlab("log10(Observed rates+1)") +
ylab("log10(Predicted rates+1)") +
scale_shape_manual(values = c(21, 16)) + #shape or color by iteration
scale_color_manual(values = c( "lightblue", "maroon")) +
#update if data changes - not automatically added
annotate(geom="text", x=3.5, y=0.5, label="R^2 == 0.05",parse =TRUE, color="maroon", size =4.5) + #update if data changes - not automatically added
annotate(geom="text", x=3.5, y=0.25, label="R^2 == 0.12", parse =TRUE,
color="lightblue", size =4.5) + #update - not automatically added
lims(y = c(0,4), x = c(0,4)) +
theme_classic() +
theme(text = element_text(size = 16),
legend.position = 0)
#adding density plots on axes
ggExtra::ggMarginal(fullscatter_firstiteration, fill = "lightgrey")
combods_filt <- read.csv("ICON-ModEx_Combined_Predicted_Observed_Respiration_Rates.csv")%>%
#remova Na's
filter(!is.na(Log_Observed_Normalized_Respiration_Rate), #Log_Observed_Normalized_Respiration_Rate
!is.na(Log_Predicted_Normalized_Respiration_Rate_Sep2019), !is.na(Log_Predicted_Normalized_Respiration_Rate_Nov2023)) %>% filter(Log_Observed_Normalized_Respiration_Rate > -9990,                                            Log_Predicted_Normalized_Respiration_Rate_Nov2023 > -9990 ,
Log_Predicted_Normalized_Respiration_Rate_Sep2019 > -9990) %>% #Log_Predicted_Normalized_Respiration_Rate
#group by above/below log500
mutate(ds_split = ifelse(Log_Observed_Normalized_Respiration_Rate > 2.7, "500+",                         ifelse(Log_Observed_Normalized_Respiration_Rate < 2.7, "500-", "500-") )) %>%
#clasifying by quad by year
mutate(ds_quadrant23 =                                                    ifelse(Log_Observed_Normalized_Respiration_Rate > 2.7 & Log_Predicted_Normalized_Respiration_Rate_Nov2023 > 2.7 , "hs23",
ifelse(Log_Observed_Normalized_Respiration_Rate > 2.7 & Log_Predicted_Normalized_Respiration_Rate_Nov2023 < 2.7 , "misclass_hs23",
ifelse(Log_Observed_Normalized_Respiration_Rate < 2.7 & Log_Predicted_Normalized_Respiration_Rate_Nov2023 < 2.7 , "cs23",
ifelse(Log_Observed_Normalized_Respiration_Rate < 2.7 & Log_Predicted_Normalized_Respiration_Rate_Nov2023 > 2.7 , "misclass_cs23", NA)))) ,
ds_quadrant19 =
ifelse(Log_Observed_Normalized_Respiration_Rate > 2.7 & Log_Predicted_Normalized_Respiration_Rate_Sep2019 > 2.7 , "hs19",
ifelse(Log_Observed_Normalized_Respiration_Rate > 2.7 & Log_Predicted_Normalized_Respiration_Rate_Sep2019 < 2.7 , "misclass_hs19",
ifelse(Log_Observed_Normalized_Respiration_Rate < 2.7 & Log_Predicted_Normalized_Respiration_Rate_Sep2019 > 2.7 , "misclass_cs19",
ifelse(Log_Observed_Normalized_Respiration_Rate < 2.7 & Log_Predicted_Normalized_Respiration_Rate_Sep2019 < 2.7 , "cs19", NA ) ))))
firstiterationds <- combods %>% filter(grepl("S19S", Sample_Name))
fullscatter_firstiteration <-
firstiterationds %>%
ggplot(aes(abs(Log_Observed_Normalized_Respiration_Rate ),
abs(Log_Predicted_Normalized_Respiration_Rate_Sep2019) #)) +
,  color =  ds_split))+
#to see R^2 for above/below thresholds, remove color grouping above and use stat poly eq fx (below)
geom_point(color = "darkgrey", size = 3, pch = 21) +
geom_vline (xintercept = 2.7, linetype = "dashed", color="grey") +
geom_hline (yintercept = 2.7, linetype = "dashed", color="dark grey") + #not a clear threshold
geom_abline (linetype = "longdash", color="black") + #not a clear threshold
stat_poly_line(color = "black", alpha = 0.5) + #overall best fit
# stat_poly_eq(use_label(c( "R2"))) + #remove hashtag to see R^2 of log500 split
annotate(geom="text", x=3.5, y=0.75, label="R^2 == 0.44",parse =TRUE, color="black", size =4.5) + #update if data changes - not automatically added
geom_smooth( aes(abs(Log_Observed_Normalized_Respiration_Rate ), #above/below threshold best fit
abs(Log_Predicted_Normalized_Respiration_Rate_Sep2019),
color =  ds_split), method = "lm", alpha = 0.2) +
xlab("log10(Observed rates+1)") +
ylab("log10(Predicted rates+1)") +
scale_shape_manual(values = c(21, 16)) + #shape or color by iteration
scale_color_manual(values = c( "lightblue", "maroon")) +
#update if data changes - not automatically added
annotate(geom="text", x=3.5, y=0.5, label="R^2 == 0.05",parse =TRUE, color="maroon", size =4.5) + #update if data changes - not automatically added
annotate(geom="text", x=3.5, y=0.25, label="R^2 == 0.12", parse =TRUE,
color="lightblue", size =4.5) + #update - not automatically added
lims(y = c(0,4), x = c(0,4)) +
theme_classic() +
theme(text = element_text(size = 16),
legend.position = 0)
fullscatter_firstiteration
#fullscatter_firstiteration <-
firstiterationds %>%
ggplot(aes(abs(Log_Observed_Normalized_Respiration_Rate ),
abs(Log_Predicted_Normalized_Respiration_Rate_Sep2019) #)) +
,  color =  ds_split))+
#to see R^2 for above/below thresholds, remove color grouping above and use stat poly eq fx (below)
geom_point(color = "darkgrey", size = 3, pch = 21) +
geom_vline (xintercept = 2.7, linetype = "dashed", color="grey") +
geom_hline (yintercept = 2.7, linetype = "dashed", color="dark grey") + #not a clear threshold
geom_abline (linetype = "longdash", color="black") + #not a clear threshold
stat_poly_line(color = "black", alpha = 0.5) + #overall best fit
# stat_poly_eq(use_label(c( "R2"))) + #remove hashtag to see R^2 of log500 split
annotate(geom="text", x=3.5, y=0.75, label="R^2 == 0.44",parse =TRUE, color="black", size =4.5) + #update if data changes - not automatically added
geom_smooth( aes(abs(Log_Observed_Normalized_Respiration_Rate ), #above/below threshold best fit
abs(Log_Predicted_Normalized_Respiration_Rate_Sep2019),
color =  ds_split), method = "lm", alpha = 0.2) +
xlab("log10(Observed rates+1)") +
ylab("log10(Predicted rates+1)") +
scale_shape_manual(values = c(21, 16)) + #shape or color by iteration
scale_color_manual(values = c( "lightblue", "maroon")) +
#update if data changes - not automatically added
annotate(geom="text", x=3.5, y=0.5, label="R^2 == 0.05",parse =TRUE, color="maroon", size =4.5) + #update if data changes - not automatically added
annotate(geom="text", x=3.5, y=0.25, label="R^2 == 0.12", parse =TRUE,
color="lightblue", size =4.5) + #update - not automatically added
lims(y = c(0,4), x = c(0,4)) +
theme_classic() +
theme(text = element_text(size = 16),
legend.position = 0)
firstiterationds <- combods_filt %>% filter(grepl("S19S", Sample_Name))
fullscatter_firstiteration <-
firstiterationds %>%
ggplot(aes(abs(Log_Observed_Normalized_Respiration_Rate ),
abs(Log_Predicted_Normalized_Respiration_Rate_Sep2019) #)) +
,  color =  ds_split))+
#to see R^2 for above/below thresholds, remove color grouping above and use stat poly eq fx (below)
geom_point(color = "darkgrey", size = 3, pch = 21) +
geom_vline (xintercept = 2.7, linetype = "dashed", color="grey") +
geom_hline (yintercept = 2.7, linetype = "dashed", color="dark grey") + #not a clear threshold
geom_abline (linetype = "longdash", color="black") + #not a clear threshold
stat_poly_line(color = "black", alpha = 0.5) + #overall best fit
# stat_poly_eq(use_label(c( "R2"))) + #remove hashtag to see R^2 of log500 split
annotate(geom="text", x=3.5, y=0.75, label="R^2 == 0.44",parse =TRUE, color="black", size =4.5) + #update if data changes - not automatically added
geom_smooth( aes(abs(Log_Observed_Normalized_Respiration_Rate ), #above/below threshold best fit
abs(Log_Predicted_Normalized_Respiration_Rate_Sep2019),
color =  ds_split), method = "lm", alpha = 0.2) +
xlab("log10(Observed rates+1)") +
ylab("log10(Predicted rates+1)") +
scale_shape_manual(values = c(21, 16)) + #shape or color by iteration
scale_color_manual(values = c( "lightblue", "maroon")) +
#update if data changes - not automatically added
annotate(geom="text", x=3.5, y=0.5, label="R^2 == 0.05",parse =TRUE, color="maroon", size =4.5) + #update if data changes - not automatically added
annotate(geom="text", x=3.5, y=0.25, label="R^2 == 0.12", parse =TRUE,
color="lightblue", size =4.5) + #update - not automatically added
lims(y = c(0,4), x = c(0,4)) +
theme_classic() +
theme(text = element_text(size = 16),
legend.position = 0)
#adding density plots on axes
ggExtra::ggMarginal(fullscatter_firstiteration, fill = "lightgrey")
ggsave(filename = "Scripts/fullscatter_firstiteration.tiff", plot = fullscatter_firstiteration, width = 6, height = 6, dpi = 300)
#adding density plots on axes
ggExtra::ggMarginal(fullscatter_firstiteration, fill = "lightgrey")
#adding density plots on axes
ggExtra::ggMarginal(fullscatter_firstiteration, fill = "lightgrey")
#fullscatter_lastiteration <-
combods %>% ggplot(aes(abs(Log_Observed_Normalized_Respiration_Rate ),
abs(Log_Predicted_Normalized_Respiration_Rate_Nov2023) #)) + #
,  color =  ds_split))+
#to see R^2 for above/below thresholds, remove color grouping above and use stat poly eq fx (below)
geom_point(color = "darkgrey", size = 3, pch = 21) +
geom_vline (xintercept = 2.7, linetype = "dashed", color="grey") +
geom_hline (yintercept = 2.7, linetype = "dashed", color="dark grey") + #not a clear threshold
geom_abline (linetype = "longdash", color="black") + #not a clear threshold
stat_poly_line(color = "black", alpha = 0.5) + #overall best fit
stat_poly_eq(use_label(c( "R2"))) + #remove hashtag to see R^2 of log500 split
annotate(geom="text", x=3.5, y=0.75, label="R^2 == 0.56",parse =TRUE, color="black", size =4.5) + #update if data changes - not automatically added
geom_smooth( aes(abs(Log_Observed_Normalized_Respiration_Rate ), #above/below threshold best fit
abs(Log_Predicted_Normalized_Respiration_Rate_Nov2023),
color =  ds_split), method = "lm", alpha = 0.2) +
xlab("log10(Observed rates+1)") +
ylab("log10(Predicted rates+1)") +
scale_shape_manual(values = c(21, 16)) + #shape or color by iteration
scale_color_manual(values = c( "lightblue", "maroon")) +
#update if data changes - not automatically added
annotate(geom="text", x=3.45, y=0.5, label="R^2 == 0.20",parse =TRUE, color="maroon", size =4.5) + #update if data changes - not automatically added
annotate(geom="text", x=3.5, y=0.25, label="R^2 == 0.21", parse =TRUE,
color="lightblue", size =4.5) + #update - not automatically added
lims(y = c(0,4), x = c(0,4)) +
theme_classic() +
theme(text = element_text(size = 16),
legend.position = 0)
combods_filt <- read.csv("ICON-ModEx_Combined_Predicted_Observed_Respiration_Rates.csv")%>%
#remova Na's
# filter(!is.na(Log_Observed_Normalized_Respiration_Rate), #Log_Observed_Normalized_Respiration_Rate
#       !is.na(Log_Predicted_Normalized_Respiration_Rate_Sep2019), !is.na(Log_Predicted_Normalized_Respiration_Rate_Nov2023)) %>% filter(Log_Observed_Normalized_Respiration_Rate > -9990,                                            Log_Predicted_Normalized_Respiration_Rate_Nov2023 > -9990 ,
#Log_Predicted_Normalized_Respiration_Rate_Sep2019 > -9990) %>% #Log_Predicted_Normalized_Respiration_Rate
#group by above/below log500
mutate(ds_split = ifelse(Log_Observed_Normalized_Respiration_Rate > 2.7, "500+",                         ifelse(Log_Observed_Normalized_Respiration_Rate < 2.7, "500-", "500-") )) %>%
#clasifying by quad by year
mutate(ds_quadrant23 =                                                    ifelse(Log_Observed_Normalized_Respiration_Rate > 2.7 & Log_Predicted_Normalized_Respiration_Rate_Nov2023 > 2.7 , "hs23",
ifelse(Log_Observed_Normalized_Respiration_Rate > 2.7 & Log_Predicted_Normalized_Respiration_Rate_Nov2023 < 2.7 , "misclass_hs23",
ifelse(Log_Observed_Normalized_Respiration_Rate < 2.7 & Log_Predicted_Normalized_Respiration_Rate_Nov2023 < 2.7 , "cs23",
ifelse(Log_Observed_Normalized_Respiration_Rate < 2.7 & Log_Predicted_Normalized_Respiration_Rate_Nov2023 > 2.7 , "misclass_cs23", NA)))) ,
ds_quadrant19 =
ifelse(Log_Observed_Normalized_Respiration_Rate > 2.7 & Log_Predicted_Normalized_Respiration_Rate_Sep2019 > 2.7 , "hs19",
ifelse(Log_Observed_Normalized_Respiration_Rate > 2.7 & Log_Predicted_Normalized_Respiration_Rate_Sep2019 < 2.7 , "misclass_hs19",
ifelse(Log_Observed_Normalized_Respiration_Rate < 2.7 & Log_Predicted_Normalized_Respiration_Rate_Sep2019 > 2.7 , "misclass_cs19",
ifelse(Log_Observed_Normalized_Respiration_Rate < 2.7 & Log_Predicted_Normalized_Respiration_Rate_Sep2019 < 2.7 , "cs19", NA ) ))))
setwd("./../")
getwd()
current_path <- rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path))
setwd("./../")
getwd()
library(tidyverse)
library(colourpicker)
library(lubridate)
library(emmeans)
library(sf)
library(ggspatial)
library(spData)
library(ggpmisc)
#install.packages("ggpubr")
library("rstudioapi")
#install.packages("ggExtra")
library(ggExtra)
library(patchwork)
combods_filt <- read.csv("ICON-ModEx_Combined_Predicted_Observed_Respiration_Rates.csv")%>%
#remova Na's
# filter(!is.na(Log_Observed_Normalized_Respiration_Rate), #Log_Observed_Normalized_Respiration_Rate
#       !is.na(Log_Predicted_Normalized_Respiration_Rate_Sep2019), !is.na(Log_Predicted_Normalized_Respiration_Rate_Nov2023)) %>% filter(Log_Observed_Normalized_Respiration_Rate > -9990,                                            Log_Predicted_Normalized_Respiration_Rate_Nov2023 > -9990 ,
#Log_Predicted_Normalized_Respiration_Rate_Sep2019 > -9990) %>% #Log_Predicted_Normalized_Respiration_Rate
#group by above/below log500
mutate(ds_split = ifelse(Log_Observed_Normalized_Respiration_Rate > 2.7, "500+",                         ifelse(Log_Observed_Normalized_Respiration_Rate < 2.7, "500-", "500-") )) %>%
#clasifying by quad by year
mutate(ds_quadrant23 =                                                    ifelse(Log_Observed_Normalized_Respiration_Rate > 2.7 & Log_Predicted_Normalized_Respiration_Rate_Nov2023 > 2.7 , "hs23",
ifelse(Log_Observed_Normalized_Respiration_Rate > 2.7 & Log_Predicted_Normalized_Respiration_Rate_Nov2023 < 2.7 , "misclass_hs23",
ifelse(Log_Observed_Normalized_Respiration_Rate < 2.7 & Log_Predicted_Normalized_Respiration_Rate_Nov2023 < 2.7 , "cs23",
ifelse(Log_Observed_Normalized_Respiration_Rate < 2.7 & Log_Predicted_Normalized_Respiration_Rate_Nov2023 > 2.7 , "misclass_cs23", NA)))) ,
ds_quadrant19 =
ifelse(Log_Observed_Normalized_Respiration_Rate > 2.7 & Log_Predicted_Normalized_Respiration_Rate_Sep2019 > 2.7 , "hs19",
ifelse(Log_Observed_Normalized_Respiration_Rate > 2.7 & Log_Predicted_Normalized_Respiration_Rate_Sep2019 < 2.7 , "misclass_hs19",
ifelse(Log_Observed_Normalized_Respiration_Rate < 2.7 & Log_Predicted_Normalized_Respiration_Rate_Sep2019 > 2.7 , "misclass_cs19",
ifelse(Log_Observed_Normalized_Respiration_Rate < 2.7 & Log_Predicted_Normalized_Respiration_Rate_Sep2019 < 2.7 , "cs19", NA ) ))))
combods_filt <- read.csv("ICON-ModEx_Combined_Predicted_Observed_Respiration_Rates.csv")#%>%
combods_filt <- read.csv("ICON-ModEx_Combined_Predicted_Observed_Respiration_Rates.csv")#%>%
knitr::opts_chunk$set(echo = TRUE)
current_path <- rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path))
setwd("./../")
getwd()
library(tidyverse)
library(colourpicker)
library(lubridate)
library(emmeans)
library(sf)
library(ggspatial)
library(spData)
library(ggpmisc)
#install.packages("ggpubr")
library("rstudioapi")
#install.packages("ggExtra")
library(ggExtra)
library(patchwork)
combods_filt <- read.csv("ICON-ModEx_Combined_Predicted_Observed_Respiration_Rates.csv") %>%
#remova Na's
filter(!is.na(Log_Observed_Normalized_Respiration_Rate), #Log_Observed_Normalized_Respiration_Rate
!is.na(Log_Predicted_Normalized_Respiration_Rate_Sep2019), !is.na(Log_Predicted_Normalized_Respiration_Rate_Nov2023)) %>% filter(Log_Observed_Normalized_Respiration_Rate > -9990,                                            Log_Predicted_Normalized_Respiration_Rate_Nov2023 > -9990 ,
Log_Predicted_Normalized_Respiration_Rate_Sep2019 > -9990) %>% #Log_Predicted_Normalized_Respiration_Rate
#group by above/below log500
mutate(ds_split = ifelse(Log_Observed_Normalized_Respiration_Rate > 2.7, "500+",                         ifelse(Log_Observed_Normalized_Respiration_Rate < 2.7, "500-", "500-") )) %>%
#clasifying by quad by year
mutate(ds_quadrant23 =                                                    ifelse(Log_Observed_Normalized_Respiration_Rate > 2.7 & Log_Predicted_Normalized_Respiration_Rate_Nov2023 > 2.7 , "hs23",
ifelse(Log_Observed_Normalized_Respiration_Rate > 2.7 & Log_Predicted_Normalized_Respiration_Rate_Nov2023 < 2.7 , "misclass_hs23",
ifelse(Log_Observed_Normalized_Respiration_Rate < 2.7 & Log_Predicted_Normalized_Respiration_Rate_Nov2023 < 2.7 , "cs23",
ifelse(Log_Observed_Normalized_Respiration_Rate < 2.7 & Log_Predicted_Normalized_Respiration_Rate_Nov2023 > 2.7 , "misclass_cs23", NA)))) ,
ds_quadrant19 =
ifelse(Log_Observed_Normalized_Respiration_Rate > 2.7 & Log_Predicted_Normalized_Respiration_Rate_Sep2019 > 2.7 , "hs19",
ifelse(Log_Observed_Normalized_Respiration_Rate > 2.7 & Log_Predicted_Normalized_Respiration_Rate_Sep2019 < 2.7 , "misclass_hs19",
ifelse(Log_Observed_Normalized_Respiration_Rate < 2.7 & Log_Predicted_Normalized_Respiration_Rate_Sep2019 > 2.7 , "misclass_cs19",
ifelse(Log_Observed_Normalized_Respiration_Rate < 2.7 & Log_Predicted_Normalized_Respiration_Rate_Sep2019 < 2.7 , "cs19", NA ) ))))
combods <- read.csv("ICON-ModEx_Combined_Predicted_Observed_Respiration_Rates.csv")
